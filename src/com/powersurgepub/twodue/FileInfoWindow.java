/*
 * FileInfoWindow.java
 *
 * Created on August 5, 2007, 2:48 PM
 */

package com.powersurgepub.twodue;

  import com.powersurgepub.twodue.disk.*;
  import com.powersurgepub.psutils.*;
  import java.awt.event.*;
  import java.io.*;


/**
 *
 * @author  hbowie
 */
public class FileInfoWindow extends javax.swing.JFrame {
  
  public static final String BACKUP_FOLDER = "Backup Folder";
  
  private TwoDueCommon  td;
  
  private String         collectionVersion = "";
  private String         backupFolder = "";
  
  /**
   * Creates new form FileInfoWindow
   */
  public FileInfoWindow(TwoDueCommon td) {
    this.td = td;
    initComponents();
    this.setTitle (Home.getShared().getProgramName() + " File Properties");
    this.setBounds (100, 100, 600, 540);
  }
  
  public void filePrep (TwoDueDiskStore store) {
    if (store != null) {
      if (! store.isUnknown()) {
        setTitle (store.getFile().getName() + " Properties");
        fileNameText.setText(store.getPath());
      }
      setPrimary (store.isPrimary());
      setForgettable (false);
      setDefaultStartTime (store.getDefaultStartTimeAsString());
    }
  }
  
  /**
    Sets default start time
    
    @param defaultStartTime Default start time.
   */
  public void setDefaultStartTime (String defaultStartTime) {
    defaultStartTimeText.setText (defaultStartTime);
  }
  
  /**
    Indicates whether this is the primary to do file for the user.
   
    @param primary True if this is the user's primary to do file.
   */
  public void setPrimary (boolean primary) {
    primaryFileCheckBox.setSelected (primary);
  }
  
  /**
    Indicates whether this file should be forgotten about.
   
    @param forgettable True if we should forget about this to do file.
   */
  public void setForgettable (boolean forgettable) {
    forgetFileCheckBox.setSelected (forgettable);
  }
  
  public void initItems() {
    // td.categories.setComboBox (itemCategoryComboBox);
  }
  
  /**
   Modifies the item if anything on the screen changed. 
   
   @return True if any item fields were modified. 
   */
  public boolean modIfChanged () {
    
    return false;
    
  } // end method
  
  public void setBackupFolder (File backupFolder) {
    try {
      this.backupFolder = backupFolder.getCanonicalPath();
    } catch (IOException e) {
      Logger.getShared().recordEvent(
          LogEvent.MINOR, 
          "Backup Folder name could not be saved", 
          false);
    }
  }
  
  public void setBackupFolder (String backupFolder) {
    this.backupFolder = backupFolder;
  }
  
  public String getBackupFolder() {
    return backupFolder;
  }
  
  public void preserveStore() {
    td.diskStore.setPrimary (primaryFileCheckBox.isSelected());
    td.diskStore.setForgettable (forgetFileCheckBox.isSelected());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    fileNameLabel = new javax.swing.JLabel();
    fileNameText = new javax.swing.JLabel();
    primaryFileLabel = new javax.swing.JLabel();
    primaryFileCheckBox = new javax.swing.JCheckBox();
    forgetFileLabel = new javax.swing.JLabel();
    forgetFileCheckBox = new javax.swing.JCheckBox();
    filler = new javax.swing.JLabel();
    defaultStartTimeLabel = new javax.swing.JLabel();
    defaultStartTimeText = new javax.swing.JTextField();

    getContentPane().setLayout(new java.awt.GridBagLayout());

    fileNameLabel.setText("File/Folder:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(fileNameLabel, gridBagConstraints);

    fileNameText.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(8, 4, 4, 4);
    getContentPane().add(fileNameText, gridBagConstraints);

    primaryFileLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    primaryFileLabel.setText("Primary?");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(primaryFileLabel, gridBagConstraints);

    primaryFileCheckBox.setText("Make this my Primary List");
    primaryFileCheckBox.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        primaryFileCheckBoxItemStateChanged(evt);
      }
    });
    primaryFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        primaryFileCheckBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(primaryFileCheckBox, gridBagConstraints);

    forgetFileLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    forgetFileLabel.setText("Forget?");
    forgetFileLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(forgetFileLabel, gridBagConstraints);

    forgetFileCheckBox.setText("Forget About This List");
    forgetFileCheckBox.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        forgetFileCheckBoxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(forgetFileCheckBox, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 99;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(filler, gridBagConstraints);

    defaultStartTimeLabel.setText("Default Start Time:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(defaultStartTimeLabel, gridBagConstraints);

    defaultStartTimeText.setText("00:00");
    defaultStartTimeText.setMinimumSize(new java.awt.Dimension(100, 19));
    defaultStartTimeText.setPreferredSize(new java.awt.Dimension(120, 19));
    defaultStartTimeText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        defaultStartTimeTextFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        defaultStartTimeTextFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(defaultStartTimeText, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void defaultStartTimeTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_defaultStartTimeTextFocusLost
    td.diskStore.setDefaultStartTime(defaultStartTimeText.getText());
    defaultStartTimeText.setText  (td.diskStore.getDefaultStartTimeAsString());
  }//GEN-LAST:event_defaultStartTimeTextFocusLost

  private void defaultStartTimeTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_defaultStartTimeTextFocusGained
    defaultStartTimeText.selectAll();
  }//GEN-LAST:event_defaultStartTimeTextFocusGained

  private void forgetFileCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_forgetFileCheckBoxItemStateChanged
    if (evt.getStateChange() == ItemEvent.SELECTED) {
      if (primaryFileCheckBox.isSelected()) {
        td.trouble.report(
            "Please select another primary file before forgetting about this one",
            "Primary File Problem");
        forgetFileCheckBox.setSelected(false);
      } else {
        td.diskStore.setForgettable(true);
        td.files.forget(td.diskStore);
      }
    } else {
      td.diskStore.setForgettable(false);
    }
  }//GEN-LAST:event_forgetFileCheckBoxItemStateChanged

  private void primaryFileCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_primaryFileCheckBoxItemStateChanged

    if (evt.getStateChange() == ItemEvent.SELECTED) {
      if (! td.diskStore.isPrimary()) {
        if (td.diskStore.isAFolder()) {
          td.setPrimary(true);
        } else {
          td.trouble.report(
              "You must specify a folder rather than a file to make it your primary storage location",
              "Primary File Problem");
          primaryFileCheckBox.setSelected(false);
        } // end if current disk store ineligible to become primary
      } // end if current disk store is not yet primary
    } else {
      // Primary Check Box set to false
      if (td.diskStore.isPrimary()) {
        td.trouble.report(
            "Please select another primary file to make this one non-primary",
            "Primary File Problem");
        primaryFileCheckBox.setSelected(true);
      } // end if the current disk store is set to be the primary
    } // end if the primary check box has been unchecked
  }//GEN-LAST:event_primaryFileCheckBoxItemStateChanged

  private void primaryFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primaryFileCheckBoxActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_primaryFileCheckBoxActionPerformed
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel defaultStartTimeLabel;
  private javax.swing.JTextField defaultStartTimeText;
  private javax.swing.JLabel fileNameLabel;
  private javax.swing.JLabel fileNameText;
  private javax.swing.JLabel filler;
  private javax.swing.JCheckBox forgetFileCheckBox;
  private javax.swing.JLabel forgetFileLabel;
  private javax.swing.JCheckBox primaryFileCheckBox;
  private javax.swing.JLabel primaryFileLabel;
  // End of variables declaration//GEN-END:variables
  
}
