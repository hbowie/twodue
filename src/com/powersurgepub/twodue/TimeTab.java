package com.powersurgepub.twodue;

	import com.powersurgepub.psutils.*;
  import com.powersurgepub.twodue.data.*;
  import com.powersurgepub.twodue.disk.*;
  import java.awt.*;
  import java.awt.event.*;
  import javax.swing.*;
  import javax.swing.event.*;
  import java.text.*;
  import java.util.*;

/**
   A panel to display time-related information about a To Do item. <p>
  
   This code is copyright (c) 2004 by Herb Bowie.
   All rights reserved. <p>
  
   Version History: <ul><li>
      2004/01/18 - Originally written.
       </ul>
  
   @author Herb Bowie (<a href="mailto:herb@powersurgepub.com">
           herb@powersurgepub.com</a>)<br>
           of PowerSurge Publishing 
           (<a href="http://www.powersurgepub.com">
           www.powersurgepub.com</a>)
  
   @version 2004/01/18 - Originally written. 
 */
public class TimeTab 
    extends javax.swing.JPanel 
        implements TwoDueTab {
          
  private TwoDueCommon  td;
  
  private String        startTimeSave   = "";
  private String        durationSave    = "";
  private String        alertPriorSave  = "";
  private boolean       changed = false;
  
  /** 
    Creates new form TimeTab.
   
    @param td The instance of TwoDueCommon that is calling this constructor.
   */
  public TimeTab(TwoDueCommon td) {
    this.td = td;
    initComponents();
  }
  
  /**
    Prepares the tab for processing of newly opened file.
   
    @param store Disk Store object for the file.
   */
  public void filePrep (TwoDueDiskStore store) {
    // No file information used on the Time Tab
  }
  
  /**
    Prepare to switch tabs and show this one.
   */
  private void showThisTab () {
    startTimeText.requestFocus();
    td.switchTabs();
  }
  
  /**
   Displays the current item.
   */
  public void displayItem() {
    ToDoItem item = td.getItem();
    titleText.setText (item.getTitle());
    dueDateText.setText (item.getDueDate (td.dateFormatter));
    startTimeSave = item.getStartTimeAsString();
    startTimeText.setText (startTimeSave);
    durationSave = item.getDurationAsString();
    durationText.setText (durationSave);
    alertPriorSave = item.getAlertPriorAsString();
    alertText.setText (alertPriorSave);
    changed = false;
  }
  
  /**
   Modifies the td.item if anything on the screen changed. 
   
   @return True if any of the data changed on this tab. 
   */
  public boolean modIfChanged () {

    return changed;
    
  } // end method
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    titleLabel = new javax.swing.JLabel();
    titleText = new javax.swing.JTextField();
    dueDateLabel = new javax.swing.JLabel();
    dueDateText = new javax.swing.JTextField();
    timeSeparator = new javax.swing.JSeparator();
    startTimeLabel = new javax.swing.JLabel();
    startTimeText = new javax.swing.JTextField();
    durationLabel = new javax.swing.JLabel();
    durationText = new javax.swing.JTextField();
    alertLabel = new javax.swing.JLabel();
    alertText = new javax.swing.JTextField();
    filler = new javax.swing.JLabel();

    setLayout(new java.awt.GridBagLayout());

    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        formComponentShown(evt);
      }
    });

    titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    titleLabel.setText("Title: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(titleLabel, gridBagConstraints);

    titleText.setEditable(false);
    titleText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
    titleText.setMinimumSize(new java.awt.Dimension(200, 18));
    titleText.setPreferredSize(new java.awt.Dimension(400, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.9;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(titleText, gridBagConstraints);

    dueDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    dueDateLabel.setText("Due Date: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(dueDateLabel, gridBagConstraints);

    dueDateText.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(dueDateText, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(timeSeparator, gridBagConstraints);

    startTimeLabel.setLabelFor(startTimeText);
    startTimeLabel.setText("Start Time:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(startTimeLabel, gridBagConstraints);

    startTimeText.setText("N/A");
    startTimeText.setMinimumSize(new java.awt.Dimension(100, 17));
    startTimeText.setPreferredSize(new java.awt.Dimension(120, 17));
    startTimeText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startTimeTextActionPerformed(evt);
      }
    });
    startTimeText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        startTimeTextFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        startTimeTextFocusLost(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(startTimeText, gridBagConstraints);

    durationLabel.setLabelFor(durationText);
    durationLabel.setText("Duration:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(durationLabel, gridBagConstraints);

    durationText.setText("N/A");
    durationText.setMinimumSize(new java.awt.Dimension(100, 17));
    durationText.setPreferredSize(new java.awt.Dimension(120, 17));
    durationText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        durationTextActionPerformed(evt);
      }
    });
    durationText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        durationTextFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        durationTextFocusLost(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(durationText, gridBagConstraints);

    alertLabel.setLabelFor(alertText);
    alertLabel.setText("Alert Prior?");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(alertLabel, gridBagConstraints);

    alertText.setText("N/A");
    alertText.setMinimumSize(new java.awt.Dimension(100, 17));
    alertText.setPreferredSize(new java.awt.Dimension(120, 17));
    alertText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        alertTextActionPerformed(evt);
      }
    });
    alertText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        alertTextFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        alertTextFocusLost(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(alertText, gridBagConstraints);

    filler.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(filler, gridBagConstraints);

  }//GEN-END:initComponents

  private void alertTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alertTextFocusLost
    if (alertText.getText().equals (alertPriorSave)) {
      // do nothing if no changes
    } else {
      changed = true;
      td.item.setAlertPrior (alertText.getText());
      alertText.setText (td.item.getAlertPriorAsString());
    }
  }//GEN-LAST:event_alertTextFocusLost

  private void durationTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationTextFocusLost
    if (durationText.getText().equals (durationSave)) {
      // do nothing if no changes
    } else {
      changed = true;
      td.item.setDuration (durationText.getText());
      durationText.setText (td.item.getDurationAsString());
    }
  }//GEN-LAST:event_durationTextFocusLost

  private void startTimeTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startTimeTextFocusLost
    if (startTimeText.getText().equals (startTimeSave)) {
      // do nothing if no changes
    } else {
      changed = true;
      td.item.setStartTime (startTimeText.getText());
      startTimeText.setText (td.item.getStartTimeAsString());
    }
  }//GEN-LAST:event_startTimeTextFocusLost

  private void alertTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alertTextFocusGained
    alertText.selectAll();
  }//GEN-LAST:event_alertTextFocusGained

  private void alertTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alertTextActionPerformed

  }//GEN-LAST:event_alertTextActionPerformed

  private void durationTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationTextFocusGained
    durationText.selectAll();
  }//GEN-LAST:event_durationTextFocusGained

  private void durationTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationTextActionPerformed

  }//GEN-LAST:event_durationTextActionPerformed

  private void startTimeTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startTimeTextFocusGained
    startTimeText.selectAll();
  }//GEN-LAST:event_startTimeTextFocusGained

  private void startTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeTextActionPerformed

  }//GEN-LAST:event_startTimeTextActionPerformed

  private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    showThisTab();
    durationText.requestFocus();
  }//GEN-LAST:event_formComponentShown


  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel alertLabel;
  private javax.swing.JTextField alertText;
  private javax.swing.JLabel dueDateLabel;
  private javax.swing.JTextField dueDateText;
  private javax.swing.JLabel durationLabel;
  private javax.swing.JTextField durationText;
  private javax.swing.JLabel filler;
  private javax.swing.JLabel startTimeLabel;
  private javax.swing.JTextField startTimeText;
  private javax.swing.JSeparator timeSeparator;
  private javax.swing.JLabel titleLabel;
  private javax.swing.JTextField titleText;
  // End of variables declaration//GEN-END:variables
  
}
