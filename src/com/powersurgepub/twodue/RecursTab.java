package com.powersurgepub.twodue;

  import com.powersurgepub.twodue.data.*;
  import com.powersurgepub.twodue.disk.*;

/**
   A panel to display recurrence information about a To Do item. <p>
  
   This code is copyright (c) 2003 by Herb Bowie.
   All rights reserved. <p>
  
   Version History: <ul><li>
      2003/10/01 - Originally written.
       </ul>
  
   @author Herb Bowie (<a href="mailto:herb@powersurgepub.com">
           herb@powersurgepub.com</a>)<br>
           of PowerSurge Publishing 
           (<a href="http://www.powersurgepub.com">
           www.powersurgepub.com</a>)
  
   @version 2003/10/01 - Originally written. 
 */
public class RecursTab 
    extends javax.swing.JPanel 
        implements TwoDueTab {
  
  private TwoDueCommon td;
  
  /** Creates new form RecursTab */
  public RecursTab(TwoDueCommon td) {
    this.td = td;
    initComponents();
  }
  
  /**
    Prepares the tab for processing of newly opened file.
   
    @param store Disk Store object for the file.
   */
  public void filePrep (TwoDueDiskStore store) {
    // No file information used on the Recurs Tab
  }
  
  /**
    Prepare to switch tabs and show this one.
   */
  private void showThisTab () {
    td.switchTabs();
  }
  
  /**
   Displays the current item.
   */
  public void displayItem() {
    ToDoItem item = td.getItem();
    recursTitleText.setText (item.getTitle());
    recursDueDateText.setText (item.getDueDate (td.dateFormatter));
    recursEveryText.setText (String.valueOf(item.getRecursEvery()));
    recursEverySlider.setValue (item.getRecursEvery());
    recursUnitComboBox.setSelectedIndex (item.getRecursUnit());
    recursDayOfWeekList.setSelectedItem (item.getRecursDayOfWeekName());
    recursWithinMonthList.setSelectedItem (item.getRecursWithinMonthName());
  }
  
  /**
   Modifies the td.item if anything on the screen changed. 
   
   @return True if any of the data changed on this tab. 
   */
  public boolean modIfChanged () {
    ToDoItem item = td.getItem();
    boolean changed = false;
    if (item != null) {

      // Check recurs every
      if (recursEverySlider.getValue() != item.getRecursEvery()) {
        changed = true;
        item.setRecursEvery (recursEverySlider.getValue());
      }

      // Check recurs unit
      if (recursUnitComboBox.getSelectedIndex() != item.getRecursUnit()) {
        changed = true;
        item.setRecursUnit (recursUnitComboBox.getSelectedIndex());
      }
      
      // Check recurs day of week
      if (! recursDayOfWeekList.getSelectedItem().equals 
          (item.getRecursDayOfWeekName())) {
        changed = true;
        item.setRecursDayOfWeek ((String)recursDayOfWeekList.getSelectedItem());
      }
      
      // Check position within month
      if (! recursWithinMonthList.getSelectedItem().equals
          (item.getRecursWithinMonthName())) {
        changed = true;
        item.setRecursWithinMonth ((String)recursWithinMonthList.getSelectedItem());
      }
    } // end if item not null
    return changed;
  } // end method
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    recursTitleLabel = new javax.swing.JLabel();
    recursTitleText = new javax.swing.JTextField();
    recursDueDateLabel = new javax.swing.JLabel();
    recursDueDateText = new javax.swing.JTextField();
    recursSeparator = new javax.swing.JSeparator();
    recursIntroLabel = new javax.swing.JLabel();
    recursEveryLabel = new javax.swing.JLabel();
    recursEveryText = new javax.swing.JTextField();
    recursEverySlider = new javax.swing.JSlider();
    recursUnitLabel = new javax.swing.JLabel();
    recursUnitComboBox = new javax.swing.JComboBox();
    recursWithinMonthLabel = new javax.swing.JLabel();
    recursWithinMonthList = new javax.swing.JComboBox();
    recursDayOfWeekLabel = new javax.swing.JLabel();
    recursDayOfWeekList = new javax.swing.JComboBox();
    filler = new javax.swing.JLabel();

    setLayout(new java.awt.GridBagLayout());

    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        formComponentShown(evt);
      }
    });
    addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        formFocusLost(evt);
      }
    });

    recursTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    recursTitleLabel.setText("Title: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursTitleLabel, gridBagConstraints);

    recursTitleText.setEditable(false);
    recursTitleText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
    recursTitleText.setMinimumSize(new java.awt.Dimension(200, 18));
    recursTitleText.setPreferredSize(new java.awt.Dimension(400, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.9;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursTitleText, gridBagConstraints);

    recursDueDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    recursDueDateLabel.setText("Due Date: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursDueDateLabel, gridBagConstraints);

    recursDueDateText.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursDueDateText, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursSeparator, gridBagConstraints);

    recursIntroLabel.setText("Item recurs");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursIntroLabel, gridBagConstraints);

    recursEveryLabel.setText("Every: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursEveryLabel, gridBagConstraints);

    recursEveryText.setEditable(false);
    recursEveryText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    recursEveryText.setText("0");
    recursEveryText.setMinimumSize(new java.awt.Dimension(30, 18));
    recursEveryText.setPreferredSize(new java.awt.Dimension(50, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursEveryText, gridBagConstraints);

    recursEverySlider.setMajorTickSpacing(5);
    recursEverySlider.setMaximum(30);
    recursEverySlider.setMinorTickSpacing(1);
    recursEverySlider.setPaintLabels(true);
    recursEverySlider.setPaintTicks(true);
    recursEverySlider.setSnapToTicks(true);
    recursEverySlider.setValue(0);
    recursEverySlider.setMinimumSize(new java.awt.Dimension(100, 44));
    recursEverySlider.setPreferredSize(new java.awt.Dimension(200, 40));
    recursEverySlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        recursEverySliderStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.9;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursEverySlider, gridBagConstraints);

    recursUnitLabel.setText("Units: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursUnitLabel, gridBagConstraints);

    recursUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "Day(s)", "Week(s)", "Month(s)", "Year(s)" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursUnitComboBox, gridBagConstraints);

    recursWithinMonthLabel.setText("Within Month:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursWithinMonthLabel, gridBagConstraints);

    recursWithinMonthList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "1st", "2nd", "3rd", "4th", "Last" }));
    recursWithinMonthList.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        recursWithinMonthListActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursWithinMonthList, gridBagConstraints);

    recursDayOfWeekLabel.setText("Day of Week: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursDayOfWeekLabel, gridBagConstraints);

    recursDayOfWeekList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(recursDayOfWeekList, gridBagConstraints);

    filler.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(filler, gridBagConstraints);

  }//GEN-END:initComponents

  private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    showThisTab();
    recursEverySlider.requestFocus();
  }//GEN-LAST:event_formComponentShown

  private void recursWithinMonthListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recursWithinMonthListActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_recursWithinMonthListActionPerformed

  private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
    // Shouldn't need to be done, since TwoDue is doing the same thing every time
    // the Tab state changes
    // td.modIfChanged();
    // td.displayItem();
  }//GEN-LAST:event_formFocusLost

  private void recursEverySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_recursEverySliderStateChanged
    if (! recursEverySlider.getValueIsAdjusting()) {
      recursEveryText.setText (String.valueOf(recursEverySlider.getValue()));
    }
  }//GEN-LAST:event_recursEverySliderStateChanged

  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel filler;
  private javax.swing.JLabel recursDayOfWeekLabel;
  private javax.swing.JComboBox recursDayOfWeekList;
  private javax.swing.JLabel recursDueDateLabel;
  private javax.swing.JTextField recursDueDateText;
  private javax.swing.JLabel recursEveryLabel;
  private javax.swing.JSlider recursEverySlider;
  private javax.swing.JTextField recursEveryText;
  private javax.swing.JLabel recursIntroLabel;
  private javax.swing.JSeparator recursSeparator;
  private javax.swing.JLabel recursTitleLabel;
  private javax.swing.JTextField recursTitleText;
  private javax.swing.JComboBox recursUnitComboBox;
  private javax.swing.JLabel recursUnitLabel;
  private javax.swing.JLabel recursWithinMonthLabel;
  private javax.swing.JComboBox recursWithinMonthList;
  // End of variables declaration//GEN-END:variables
  
}
